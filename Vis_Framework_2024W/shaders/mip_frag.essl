#ifndef GL_ES
#version 330 es
#endif

precision highp int;
precision highp float;
precision highp sampler3D;



uniform sampler3D volume;
uniform vec3 volume_dims;
uniform vec3 volume_scale;

uniform vec4 color;


in vec3 vEye;
in vec3 vDir;

out vec4 fragColor;



vec2 intersect_box(vec3 orig, vec3 dir) {
	vec3 box_min = vec3(0);
	vec3 box_max = vec3(1);
	vec3 inv_dir = 1.0 / dir;
	vec3 tmin_tmp = (box_min - orig) * inv_dir;
	vec3 tmax_tmp = (box_max - orig) * inv_dir;
	vec3 tmin = min(tmin_tmp, tmax_tmp);
	vec3 tmax = max(tmin_tmp, tmax_tmp);
	float t0 = max(tmin.x, max(tmin.y, tmin.z));
	float t1 = min(tmax.x, min(tmax.y, tmax.z));
	return vec2(t0, t1);
}

void main() {
    float steps = 100.0;

    vec3 rayDir = normalize(vDir);
    vec2 bounds = intersect_box(vEye, rayDir);

    if (bounds.x > bounds.y)
        discard;

    bounds.x = max(bounds.x, 0.0);

    vec3 p = vEye + bounds.x * rayDir;
    vec3 inc = 1.0 / abs(rayDir);
    float delta = min(inc.x, min(inc.y, inc.z));
    delta /= steps;

    vec4 ac = vec4(0.5, 0.5, 0.5, 0.0);
    float max_intensity = 0.0;

    for (float t = bounds.x; t < bounds.y; t += delta) {
        float d = texture(volume, p).r;

        max_intensity = max(max_intensity, d);

        if (max_intensity >= 0.95){
            //fragColor = vec4(1.0, 0.0, 0.0, 1.0);
            //return;
            break;
        }

        p += rayDir * delta;
    }




    fragColor = vec4(vec3(max_intensity), 1.0);//vec4(1.0, 0.0, 0.0, 1.0); // vec4(vec3(maxIntensity), 1.0);

}